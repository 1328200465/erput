package xyz.erupt.core.controller;import com.google.gson.Gson;import com.google.gson.JsonObject;import lombok.extern.java.Log;import org.apache.commons.lang3.StringUtils;import org.hibernate.exception.ConstraintViolationException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.web.bind.annotation.*;import xyz.erupt.annotation.EruptField;import xyz.erupt.annotation.fun.DataProxy;import xyz.erupt.core.annotation.EruptRouter;import xyz.erupt.core.constant.RestPath;import xyz.erupt.core.exception.EruptNoLegalPowerException;import xyz.erupt.core.service.CoreService;import xyz.erupt.core.service.DataService;import xyz.erupt.core.util.AnnotationUtil;import xyz.erupt.core.util.EruptSpringUtil;import xyz.erupt.core.util.EruptUtil;import xyz.erupt.core.util.ReflectUtil;import xyz.erupt.core.view.EruptApiModel;import xyz.erupt.core.view.EruptModel;import javax.transaction.Transactional;import java.lang.reflect.Field;/** * Erupt 对数据的增删改查 * * @author liyuepeng * @date 9/28/18. */@RestController@RequestMapping(RestPath.ERUPT_DATA)@Logpublic class EruptModifyController {    @Autowired    private Gson gson;    @Autowired    private EruptService eruptService;    @PostMapping("/{erupt}")    @ResponseBody    @EruptRouter(authIndex = 1)    public EruptApiModel addEruptData(@PathVariable("erupt") String erupt,                                      @RequestBody JsonObject data, JsonObject jsonObject) throws Exception {        EruptModel eruptModel = CoreService.getErupt(erupt);        if (eruptModel.getErupt().power().add()) {            EruptApiModel eruptApiModel = EruptUtil.validateEruptValue(eruptModel, data);            if (eruptApiModel.getStatus() == EruptApiModel.Status.ERROR) {                return eruptApiModel;            }            Object obj = gson.fromJson(data.toString(), eruptModel.getClazz());            this.clearObjectDefaultValueByJson(obj, data);            obj = this.dataTarget(eruptModel, obj, eruptModel.getClazz().newInstance());            if (null != jsonObject) {                for (String key : jsonObject.keySet()) {                    Field field = ReflectUtil.findClassField(eruptModel.getClazz(), key);                    field.setAccessible(true);                    field.set(obj, gson.fromJson(jsonObject.get(key).toString(), field.getType()));                }            }            for (Class<? extends DataProxy> proxy : eruptModel.getErupt().dataProxy()) {                EruptSpringUtil.getBean(proxy).beforeAdd(obj);            }            AnnotationUtil.getEruptDataProcessor(eruptModel.getClazz()).addData(eruptModel, obj);            this.modifyLog(eruptModel, "ADD", data.toString());            for (Class<? extends DataProxy> proxy : eruptModel.getErupt().dataProxy()) {                EruptSpringUtil.getBean(proxy).afterAdd(obj);            }            return EruptApiModel.successApi();        } else {            throw new EruptNoLegalPowerException();        }    }    @PutMapping("/{erupt}")    @ResponseBody    @EruptRouter(authIndex = 1)    public EruptApiModel editEruptData(@PathVariable("erupt") String erupt, @RequestBody JsonObject data) throws Exception {        EruptModel eruptModel = CoreService.getErupt(erupt);        if (eruptModel.getErupt().power().edit()) {            EruptApiModel eruptApiModel = EruptUtil.validateEruptValue(eruptModel, data);            if (eruptApiModel.getStatus() == EruptApiModel.Status.ERROR) {                return eruptApiModel;            }            if (!eruptService.verifyIdPermissions(eruptModel, data.get(eruptModel.getErupt().primaryKeyCol()).getAsString())) {                throw new EruptNoLegalPowerException();            }            Object obj = this.gson.fromJson(data.toString(), eruptModel.getClazz());            this.clearObjectDefaultValueByJson(obj, data);            obj = this.dataTarget(eruptModel, obj, AnnotationUtil.getEruptDataProcessor(eruptModel.getClazz())                    .findDataById(eruptModel, ReflectUtil.findClassField(eruptModel.getClazz(), eruptModel.getErupt().primaryKeyCol()).get(obj)));            for (Class<? extends DataProxy> proxy : eruptModel.getErupt().dataProxy()) {                EruptSpringUtil.getBean(proxy).beforeUpdate(obj);            }            AnnotationUtil.getEruptDataProcessor(eruptModel.getClazz()).editData(eruptModel, obj);            this.modifyLog(eruptModel, "EDIT", data.toString());            for (Class<? extends DataProxy> proxy : eruptModel.getErupt().dataProxy()) {                EruptSpringUtil.getBean(proxy).afterUpdate(obj);            }            return EruptApiModel.successApi();        } else {            throw new EruptNoLegalPowerException();        }    }    private Object dataTarget(EruptModel eruptModel, Object data, Object target) {        ReflectUtil.findClassAllFields(eruptModel.getClazz(), (field) -> {            EruptField eruptField = field.getAnnotation(EruptField.class);            if (null != eruptField) {                if (StringUtils.isNotBlank(eruptField.edit().title()) && !eruptField.edit().readOnly()) {                    try {                        Field f = ReflectUtil.findClassField(eruptModel.getClazz(), field.getName());                        f.set(target, f.get(data));                    } catch (IllegalAccessException e) {                        e.printStackTrace();                    }                }            }        });        return target;    }    //清理序列化后对象所产生的默认值（通过json串进行校验）    private void clearObjectDefaultValueByJson(Object obj, JsonObject data) {        ReflectUtil.findClassAllFields(obj.getClass(), field -> {            try {                field.setAccessible(true);                if (null != field.get(obj)) {                    if (!data.has(field.getName())) {                        field.set(obj, null);                    }                }            } catch (IllegalAccessException e) {                e.printStackTrace();            }        });    }    @DeleteMapping("/{erupt}/{id}")    @ResponseBody    @EruptRouter(authIndex = 1)    public EruptApiModel deleteEruptData(@PathVariable("erupt") String erupt, @PathVariable("id") String id) {        EruptModel eruptModel = CoreService.getErupt(erupt);        if (eruptModel.getErupt().power().delete()) {            if (!eruptService.verifyIdPermissions(eruptModel, id)) {                throw new EruptNoLegalPowerException();            }            DataService dataService = AnnotationUtil.getEruptDataProcessor(eruptModel.getClazz());            //获取对象数据信息用于DataProxy函数中            Object obj = dataService.findDataById(eruptModel, EruptUtil.toEruptId(eruptModel, id));            for (Class<? extends DataProxy> proxy : eruptModel.getErupt().dataProxy()) {                EruptSpringUtil.getBean(proxy).beforeDelete(obj);            }            try {                dataService.deleteData(eruptModel, obj);            } catch (DataIntegrityViolationException | ConstraintViolationException e) {                e.printStackTrace();                throw new RuntimeException("删除失败，可能存在关联数据，无法直接删除！");            }            this.modifyLog(eruptModel, "DELETE", id);            for (Class<? extends DataProxy> proxy : eruptModel.getErupt().dataProxy()) {                EruptSpringUtil.getBean(proxy).afterDelete(obj);            }            return EruptApiModel.successApi();        } else {            throw new EruptNoLegalPowerException();        }    }    //为了事务性考虑所以增加了批量删除功能    @Transactional    @DeleteMapping("/{erupt}")    @ResponseBody    @EruptRouter(authIndex = 1)    public EruptApiModel deleteEruptDataList(@PathVariable("erupt") String erupt, @RequestParam("ids") String[] ids) throws Exception {        EruptApiModel eruptApiModel = EruptApiModel.successApi();        for (String id : ids) {            eruptApiModel = this.deleteEruptData(erupt, id);            if (eruptApiModel.getStatus() == EruptApiModel.Status.ERROR) {                break;            }        }        return eruptApiModel;    }    private void modifyLog(EruptModel eruptModel, String placeholder, String content) {        log.info("[" + eruptModel.getEruptName() + " -> " + placeholder + "]:" + content);    }}